udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
udacious
udacious
udacious
udacious
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", "Ettore Murabito")
mystery = nchar(udacious)
mystery
mystery == 11
udacious[mystery == 11]
data(mtcars)
names(mtcars)
?mtcars
mtcars
str(mtcars)
dim(mtcars)
?row.names
row.names(mtcars)
row.names(mtcars) <- c(1:32)
mtcars
# to the console. The [1] indicates that 32 is the first value
data(mtcars)
head(mtcars, 10)
head(mtcars)
tail(mtcars, 3)
mtcars$mpg
mean(mtcars$mpg)
# install.packages('knitr', dependencies = T)
# library(knitr)
install.packages('knitr', dependencies = T)
library(knitr)
summary(mtcars)
str(mtcars)
efficient <- subset(mtcars, mpg >= 23)
efficient
count(efficient)
nrow(efficient)
nrows(efficient)
nrow(efficient)
subset(mtcars, mpg > 30 & hp > 100)
subset(mtcars, mpg < 14 | disp > 390)
subset(mtcars, qsec <= 16.90)
lightCars <- subset(mtcars, wt < 2)
nrow(lightCars)
lightCars
mtcars$year <- 1974
mtcars
?mtcars
head(mtcars, 10)
tail(mtcars, 10)
View(mtcars)
View(mtcars)
mtcars <- subset(mtcars, select = -year)
mtcars$year <- c(1973, 1974)
head(mtcars, 10)
head(mtcars, 10)
mtcars <- subset(mtcars, select = -year)
mtcars <- subset(mtcars, select = -year)
head(mtcars, 10)
mtcars$wt
cond <- mtcars$wt < 3
cond
mtcars$weight_class <- ifelse(cond, 'light', 'average')
mtcars$weight_class
cond <- mtcars$wt > 3.5
cond
mtcars$weight_class <- ifelse(cond, 'heavy', mtcars$weight_class)
mtcars$weight_class
rm(cond)
rm(efficient)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
subset(mtcars, mpg >= 30 | hp < 60)
install.packages('gplot2')
install.packages('ggplot2')
library(ggplot2)
library(ggplot)
wf <- read.csv('wineQualityReds.csv', sep = ',')
wf$X <- NULL
setwd("C:/Users/ettore/Google Drive/Personal/Udacity/Data Analyst Nanodegre/Data Analysis with R/Project")
wf <- read.csv('wineQualityReds.csv', sep = ',')
wf$X <- NULL
nrow(subset(wf, citric.acid == 0))
ggplot(aes(x = citric.acid, y = fixed.acidity, colour = pH),
data = subset(wf4, citric.acid > 0)) +
geom_point(alpha = 0.4) +
theme(axis.text=element_text(size=10), axis.title=element_text(size=14)) +
scale_colour_gradient(low = "blue", high = "red", space = "Lab",
na.value = "grey50", guide = "colourbar")
library(ggplot2)
ggplot(aes(x = citric.acid, y = fixed.acidity, colour = pH),
data = subset(wf4, citric.acid > 0)) +
geom_point(alpha = 0.4) +
theme(axis.text=element_text(size=10), axis.title=element_text(size=14)) +
scale_colour_gradient(low = "blue", high = "red", space = "Lab",
na.value = "grey50", guide = "colourbar")
ggplot(aes(x = citric.acid, y = fixed.acidity, colour = pH),
data = subset(wf, citric.acid > 0)) +
geom_point(alpha = 0.4) +
theme(axis.text=element_text(size=10), axis.title=element_text(size=14)) +
scale_colour_gradient(low = "blue", high = "red", space = "Lab",
na.value = "grey50", guide = "colourbar")
ss = subset(wf, citric.acid == 0)
hist(ss$pH)
cor.test(sqrt(wf$fixed.acidity, wf$citric.acid)
cor.test(sqrt(wf$fixed.acidity, wf$citric.acid))$estimate
cor.test(sqrt(wf$fixed.acidity), wf$citric.acid)$estimate
cor.test(wf$fixed.acidity, wf$citric.acid)$estimate
ggplot(aes(fixed.acidity, citric.acid), data = wf) +
geom_point(color = 'green4', alpha = 0.1) +
geom_line(stat = 'summary', fun.y = mean) +
geom_smooth(method=lm) +
theme(axis.text=element_text(size=12), axis.title = element_text(size=15))
percentile = list()
for (column in input_variables){
percentile[column] = quantile(wf[,column], 0.98)
}
to_be_removed = vector()
for (r in 1:nrow(wf)){
for (c in input_variables){
if (wf[r,c] >= percentile[c]){
to_be_removed = c(to_be_removed, r)
break
}
}
}
wf4 = wf[-to_be_removed,]
for (column in input_variables)
{
if (column != 'quality')
{
correlation <- cor.test(wf4$quality, wf4[,column], method=("pearson"))
cat(sprintf('quality  -  %s  -->  Corr: %s\n',
column, round(correlation$estimate, 3)))
}
}
source('utilities.R')
percentile = list()
for (column in input_variables){
percentile[column] = quantile(wf[,column], 0.98)
}
to_be_removed = vector()
for (r in 1:nrow(wf)){
for (c in input_variables){
if (wf[r,c] >= percentile[c]){
to_be_removed = c(to_be_removed, r)
break
}
}
}
wf4 = wf[-to_be_removed,]
for (column in input_variables)
{
if (column != 'quality')
{
correlation <- cor.test(wf4$quality, wf4[,column], method=("pearson"))
cat(sprintf('quality  -  %s  -->  Corr: %s\n',
column, round(correlation$estimate, 3)))
}
}
input_variables <- banes(wf)[-length(names(wf))][]
input_variables <- names(wf)[-length(names(wf))][]
percentile = list()
for (column in input_variables){
percentile[column] = quantile(wf[,column], 0.98)
}
to_be_removed = vector()
for (r in 1:nrow(wf)){
for (c in input_variables){
if (wf[r,c] >= percentile[c]){
to_be_removed = c(to_be_removed, r)
break
}
}
}
wf4 = wf[-to_be_removed,]
for (column in input_variables)
{
if (column != 'quality')
{
correlation <- cor.test(wf4$quality, wf4[,column], method=("pearson"))
cat(sprintf('quality  -  %s  -->  Corr: %s\n',
column, round(correlation$estimate, 3)))
}
}
ggplot(aes(fixed.acidity, citric.acid), data = wf4) +
geom_point(color = 'green4', alpha = 0.1) +
geom_line(stat = 'summary', fun.y = mean) +
geom_smooth(method=lm) +
theme(axis.text=element_text(size=12), axis.title = element_text(size=15))
ggplot(aes(fixed.acidity, volatile.acidity), data = wf4) +
geom_point(color = 'green4', alpha = 0.1) +
geom_line(stat = 'summary', fun.y = mean) +
geom_smooth(method=lm) +
theme(axis.text=element_text(size=12), axis.title = element_text(size=15))
cor.test(wf4$fixed.acidity, wf4$volatile.acidity)$estimate
eses
cor.test(wf4$fixed.acidity, wf4$volatile.acidity)$estimate
cor.test(wf4$citric.acid, wf4$pH)$estimate
cor.test(log10(wf4$citric.acid), wf4$pH)$estimate
cor.test(wf4$citric.acid, log10(wf4$pH)$estimate
cor.test(wf4$citric.acid, log10(wf4$pH))$estimate
w5 = subset(wf4, citric.acid != 0)
cor.test(wf5$citric.acid, log10(wf5$pH))$estimate
cor.test(w5$citric.acid, log10(w5$pH))$estimate
cor.test(w5$citric.acid, w5$pH)$estimate
ggplot(aes(fixed.acidity.disc, citric.acid), data = wf4.subset) +
geom_point(color = 'green4', alpha = 0.5) +
geom_line(stat = 'summary', fun.y = mean) +
geom_smooth(method=lm) +
theme(axis.text=element_text(size=12), axis.title = element_text(size=15))
ggplot(aes(x = citric.acid, y = fixed.acidity, colour = pH), data = wf4) +
geom_point(alpha = 1) +
theme(axis.text=element_text(size=10), axis.title=element_text(size=14)) +
scale_colour_gradient(low = "blue", high = "red", space = "Lab",
na.value = "grey50", guide = "colourbar")
nrow(subset(wf4, quality == 3))
nrow(subset(wf4, quality == 4))
nrow(subset(wf4, quality == 7))
nrow(subset(wf4, quality == 8))
nrow(subset(wf, quality == 8))
nrow(subset(wf, quality == 3))
percentile = list()
for (column in input_variables){
percentile[column] = quantile(wf[,column], 0.99)
}
to_be_removed = vector()
for (r in 1:nrow(wf)){
for (c in input_variables){
if (wf[r,c] >= percentile[c]){
to_be_removed = c(to_be_removed, r)
break
}
}
}
wf4 = wf[-to_be_removed,]
for (column in input_variables)
{
if (column != 'quality')
{
correlation <- cor.test(wf4$quality, wf4[,column], method=("pearson"))
cat(sprintf('quality  -  %s  -->  Corr: %s\n',
column, round(correlation$estimate, 3)))
}
}
nrow(wf4)
subset(wf4, quality == 3)
005p1 <-
Now it is possible to see from the top-left plot too that there is a mild tendency to have lower pH associated with higher content of citric acid and viceversa.
Conversely the top-right plot shows that it is not possible to have even a rough guess of the density of the wine based on the citric acid content and the pH.
The trends observed in the plots above are quite mild, hence none of the three variables there represented can be considered as redundant since there is not a strong relationship with the other two.lcohol1
hist(wf4.quality)
hist(wf4$quality)
input_variables <- names(wf)[-length(names(wf))][]
input_variables
long_right_tails = c('citric.acid', 'residual.sugar', 'chlorides',
'free.sulfur.dioxide', 'total.sulfur.dioxide',
'sulphates')
long_right_tails
typeof(input_variables)
typeof(long_right_tails)
input_variables
for (column in input_variables){
print(column)
}
for (column in input_variables){
typeof(column)
}
for (column in input_variables){
print(typeof(column))
}
for (column in input_variables){
print(quantile(wf[,column], 0.99))
}
for (column in long_right_tails){
print(quantile(wf[,column], 0.99))
}
long_right_tails = c('citric.acid', 'residual.sugar', 'chlorides',
'free.sulfur.dioxide', 'total.sulfur.dioxide',
'sulphates')
percentile = list()
for (column in long_right_tails){
#if (match(column, long_right_tails)) {
percentile[column] = quantile(wf[,column], 0.99)
#}
}
input_variables
subset(wf, citric.acid < quantile(wf$citric.acid, 0.99))
subset(wf, citric.acid > quantile(wf$citric.acid, 0.99))
subset(wf, residual.sugar > quantile(wf$residual.sugar, 0.99))
subset(wf, chlorides > quantile(wf$chlorides, 0.99))
subset(wf, free.sulfur.dioxide > quantile(wf$free.sulfur.dioxide, 0.99))
subset(wf, total.sulfur.dioxide > quantile(wf$total.sulfur.dioxide, 0.99))
subset(wf, sulphates > quantile(wf$sulphates, 0.99))
long_right_tails = c('citric.acid', 'residual.sugar', 'chlorides',
'free.sulfur.dioxide', 'total.sulfur.dioxide',
'sulphates')
percentile = list()
for (column in input_variables){
if (match(column, 'citric.acid')) {
percentile[column] = quantile(wf[,column], 0.99)
}
}
long_right_tails = c('citric.acid', 'residual.sugar', 'chlorides',
'free.sulfur.dioxide', 'total.sulfur.dioxide',
'sulphates')
percentile = list()
for (column in long_right_tails){
#if (match(column, 'citric.acid')) {
percentile[column] = quantile(wf[,column], 0.99)
#}
}
length(percentile)
length(input_variables)
length(long_right_tails)
pippo= 'ciao'
pippo
cat(pippo)
wf2 <- subset(wf, select = c('citric.acid', 'residual.sugar', 'chlorides',
'free.sulfur.dioxide', 'total.sulfur.dioxide',
'sulphates'))
head(wf2)
names(wf2)
input_variables <- names(wf)[-length(names(wf))][]
input_variables
input_variables <- names(wf)[-length(names(wf))]
input_variables
names(wf)
pippo <- names(wf)[c(1, 2, 3, 4, 5, 6, 7, 10, 11)][]
pippo
sumary(wf$quality)
pippo = summary(wf$quality)
pippo$mean
pippo$Mean
pippo
pippo[1]
pippo[1]$value
pippo[1]$estimate
pippo[1]$Value
pippo[1] >2
for (i in names(wf)){
summary(wf$i)
}
for (i in names(wf)){
print(summary(wf$i))
}
for (i in names(wf)){
print(summary(wf[, i]))
}
lrt <- vector()
for (i in names(wf)){
s <- summary(wf[, i])
if ((s[5] - s[3]) * 10 <= (s[6] - s[3])){
lrt <- c(lrt,i)
}
}
lrt
lrt <- vector()
for (i in names(wf)){
s <- summary(wf[, i])
if ((s[5] - s[3]) * 8 <= (s[6] - s[3])){
lrt <- c(lrt,i)
}
}
lrt
source('utilities.R')
long_right_tail <- find_lrt(wf[,1:(ncol(wf)-1)])
long_right_tail
percentile = list()
for (column in long_right_tail){
percentile[column] = quantile(wf[,column], 0.99)
}
to_be_removed = vector()
for (r in 1:nrow(wf)){
for (c in long_right_tail){
if (wf[r,c] >= percentile[c]){
to_be_removed = c(to_be_removed, r)
break
}
}
}
wf4 = wf[-to_be_removed,]
nrow(subset(wf4, quality == 3))
subset(wf, volatile.acidity > quantile(volatile,acidity, 0.99))$quality
subset(wf, volatile.acidity > quantile(volatile.acidity, 0.99))$quality
to_be_removed
ggplot(aes(factor(quality)), data = wf[to_be_removed,]) +
geom_histogram(col="black", fill = "red", binwidth = 0.5) +
labs(title = "Red Wine Quality Distribution", x = "Quality", y = "Count")
